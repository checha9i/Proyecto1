
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 2;
  STATIC = true;
  IGNORE_CASE = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Analizador_opciones)
package proyecto1.Opciones.Analizador;
import proyecto1.Opciones.Nodo;
import proyecto1.Opciones.Constants;
public class Analizador_opciones {

public Nodo root;

}

PARSER_END(Analizador_opciones)

TOKEN:{
<IDPREGUNTA:"IDPREGUNTA">
|<ETIQUETA:"ETIQUETA">
|<ETIQUETA:"ETIQUETA">
|<MULTIMEDIA:"MULTIMEDIA">


|<delim:"`">
  |<Igual:"=">
  |<LlaveL:"{">
  |<LlaveR:"}">
 |<ID: (<LETRA>|<NUM>|"_")+>
|<Numeral : "#">
|<CorcheteL : "[" >
|<CorcheteR : "]" >
|< #LETRA : (["a" - "z", "A" - "Z"]) >
|< #NUM : (["0" - "9"]) >
|<Cualquiera :"~"(~["#",".", "~","[", "]"])+"~">
|<Punto: ".">
|<PuntoP: "..">
}


void INICIO():
{
  Nodo padre, hijo;
Token t;
}
{
  { padre = new Nodo(Constants.INICIO,0,0,"INICIO"); } 
hijo = INSTRUCCIONES() { padre.hijos.add(hijo);} {root = padre; } 
}

Nodo INSTRUCCIONES():{
}
{
}